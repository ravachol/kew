name: anylinux-release
on:
  workflow_dispatch:
  push:
    branches:
      - main # :/
    paths:
      - "src/**"
      - "include/**"
      - "appdir/**"
      - "Makefile"
  pull_request:
    branches:
      - main
    paths:
      - "src/**"
      - "include/**"
      - "appdir/**"
      - "Makefile"

jobs:
  build-appbundle:
    name: "Build kew (${{ matrix.arch }})"
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            arch: x86_64
          - runs-on: ubuntu-24.04-arm
            arch: aarch64
    container:
      image: "alpine:edge"
      volumes:
        - /:/host  # Jailbreak!
    steps:
      - name: Patch native Alpine NodeJS into Runner environment
        if: runner.os == 'Linux'
        run: |
          apk add nodejs gcompat
          sed -i "s:ID=alpine:ID=NotpineForGHA:" /etc/os-release
          cd /host/home/runner/runners/*/externals/
          rm -rf node20/*
          mkdir node20/bin
          ln -s /usr/bin/node node20/bin/node

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          apk update
          apk add --no-cache \
            build-base \
            taglib-dev \
            fftw-dev \
            chafa-dev \
            opus-dev \
            opusfile-dev \
            libvorbis-dev \
            libogg-dev \
            glib-dev \
            curl-dev \
            github-cli \
            git

      - name: Build kew
        run: |
          make -j$(nproc) -l$(nproc)
          VERSION=$(./kew --version | awk -F": " 'FNR==6 {printf $NF}')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "${VERSION}" > version.txt

      - name: Upload Version Info
        uses: actions/upload-artifact@v4.6.1
        with:
          name: version-info-${{ matrix.arch }}
          path: version.txt
          retention-days: 7

      - name: Prepare AppDir
        run: |
          wget -qO ./sharun "https://github.com/VHSgunzo/sharun/releases/latest/download/sharun-$(uname -m)-aio"
          chmod +x ./sharun
          ./sharun l --with-sharun --gen-lib-path --with-hooks --dst-dir ./appdir ./kew
          cd ./appdir && {
            ln -sfT ./sharun ./AppRun
            echo "kew" >> .app
          }

      - name: Create AppBundle
        run: |
          wget -qO ./pelf "https://github.com/xplshn/pelf/releases/latest/download/pelf_$(uname -m)"
          chmod +x ./pelf
          mkdir -p output
          echo "Generating [dwfs]AppBundle...(Go runtime)"
          ./pelf --add-appdir ./appdir \
                 --appbundle-id="kew-${VERSION}" \
                 --output-to "./output/kew-${VERSION}-anylinux-$(uname -m).dwfs.AppBundle"
          echo "ARTIFACT_NAME=kew-${VERSION}-anylinux-$(uname -m).dwfs.AppBundle" >> $GITHUB_ENV

      - name: Upload Artifact
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4.6.1
        with:
          name: kew-appbundle-${{ matrix.arch }}
          path: ./output/*.AppBundle*
          retention-days: 7

  release:
    name: Create Release
    needs: build-appbundle
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    container: "alpine:edge"
    steps:
      - name: Install dependencies
        run: |
          apk add --no-cache github-cli

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Set version from artifact
        run: |
          # Since we might have multiple version files from different architectures, just use the first one
          VERSION=$(cat artifacts/version-info-*/version.txt | head -n 1)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Delete Previous Release
        run: |
          gh release delete "v${VERSION}" --repo "${GITHUB_REPOSITORY}" --cleanup-tag -y || true
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "kew ${{ env.VERSION }}"
          tag_name: "v${{ env.VERSION }}"
          draft: false
          generate_release_notes: true
          make_latest: true
          files: |
            artifacts/*.AppBundle*
